{
	"info": {
		"_postman_id": "51cfb513-20cf-45ae-8f34-b03b2abed997",
		"name": "Solicitud Asistencia",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25441857"
	},
	"item": [
		{
			"name": "Solicitud Asistencia",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validacio HTTP 200",
							"pm.test(\"HTTP 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validación respuesta",
							"pm.test(\"Respuesta válida\", function () {",
							"    const json = pm.response.json();",
							"    pm.expect(json.mensaje).to.eql(\"Solicitud recibida correctamente\");",
							"});",
							"",
							"// Validación tiempo de respuesta",
							"pm.test(\"Tiempo de respuesta < 2s\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"// Campos obligatorios",
							"pm.test(\"Validar campos obligatorios\", () => {",
							"  const status = pm.response.code;",
							"  const json = pm.response.json();",
							"",
							"  if (status === 400) {",
							"    pm.expect(json.error).to.be.a(\"string\");",
							"",
							"    const campos = [\"usuarioId\", \"tipoAsistencia\", \"direccion\", \"fecha\"];",
							"",
							"    // Verificamos que el mensaje contenga alguno de los nombres de campos",
							"    const campoEncontrado = campos.find(campo => json.error.includes(campo));",
							"",
							"    pm.expect(campoEncontrado, `El error debe mencionar un campo obligatorio, pero no menciona ninguno.`).to.not.be.undefined;",
							"  } else {",
							"    // Si no es 400, la respuesta debe ser 200 OK",
							"    pm.expect(status).to.eql(200);",
							"    pm.expect(json.error).to.be.undefined;",
							"  }",
							"});",
							"",
							"// Validar formato d la fecha",
							"pm.test(\"Fecha en formato correcto\", () => {",
							"    const fecha = pm.response.json().data?.fecha;",
							"    pm.expect(fecha).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
							"});",
							"",
							"// Validacion de estructura de placa",
							"pm.test(\"Validar estructura usuarioId\", () => {",
							"    if (pm.response.code === 400) {",
							"        const json = pm.response.json();",
							"        pm.expect(json.error).to.not.include(\"usuarioId debe tener el formato AAA123\");",
							"    }",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"usuarioId\": \"WWW345\",\n    \"tipoAsistencia\": \"cita-medica\",\n    \"direccion\": \"av 67 hh8 yy\",\n    \"fecha\": \"2030-09-09\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/asisya/solicitud-asistencia",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"asisya",
						"solicitud-asistencia"
					]
				}
			},
			"response": []
		}
	]
}